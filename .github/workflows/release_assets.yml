name: release assets

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  bundle:
    strategy:
      matrix:
        os: [ macos-latest, macos-13, ubuntu-latest, windows-latest ]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup signing for MacOS
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macos-13' }}
        env:
          APPLE_BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          APPLE_BUILD_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_BUILD_CERTIFICATE_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          LOCAL_PROPERTIES_BASE64: ${{ secrets.LOCAL_PROPERTIES_BASE64 }}
        run: |
          # create variables
          WORK_DIR="$(pwd)"
          LOCAL_PROPERTIES_PATH="${WORK_DIR}/local.properties"
          CERTIFICATE_PATH="${WORK_DIR}/share/apple/certificate.p12"
          KEYCHAIN_PATH="${WORK_DIR}/share/apple/keychain.keychain-db"
          
          # write base64 secrets into files
          echo -n "${LOCAL_PROPERTIES_BASE64}" | base64 --decode -o "${LOCAL_PROPERTIES_PATH}"
          echo -n "${APPLE_BUILD_CERTIFICATE_BASE64}" | base64 --decode -o "${CERTIFICATE_PATH}"
          
          # create temporary keychain
          security create-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          security unlock-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          
          # import certificate to keychain
          security import "${CERTIFICATE_PATH}" -P "${APPLE_BUILD_CERTIFICATE_PASSWORD}" -A -t cert -f pkcs12 -k "${KEYCHAIN_PATH}"
          security set-key-partition-list -S apple-tool:,apple: -k "${APPLE_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security list-keychain -d user -s "${KEYCHAIN_PATH}"

      - name: Setup environment for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: choco install wget

      - name: Init JetBrains JDK
        shell: bash
        run: ./init-jdk.sh

      - name: Build with Gradle
        shell: bash
        run: |
          source env.sh
          ./gradlew clean bundle

      - name: Upload bundle to release
        shell: bash
        env:
          TAG: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          for file in $(find build -type f -maxdepth 1)
          do
            echo "RELEASE $file IN $TAG"
            gh release upload $TAG $file
          done
