name: create bundles

on:
  workflow_dispatch:
    inputs:
      macos_arm64:
        description: "Build for MacOS arm64"
        required: true
        default: true
        type: boolean

      macos_x64:
        description: "Build for MacOS x64"
        required: true
        default: true
        type: boolean

      linux_x64:
        description: "Build for Linux x64"
        required: true
        default: true
        type: boolean

      windows_x64:
        description: "Build for Windows x64"
        required: true
        default: true
        type: boolean

      signing_enabled:
        description: "Sign application bundles"
        required: true
        default: false
        type: boolean

jobs:
  bundle:
    strategy:
      matrix:
        os: [ macos-latest, macos-13, ubuntu-latest, windows-latest ]
        exclude:
          - os: ${{ !inputs.macos_arm64 && 'macos-latest' }}
          - os: ${{ !inputs.macos_x64 && 'macos-13' }}
          - os: ${{ !inputs.linux_x64 && 'ubuntu-latest' }}
          - os: ${{ !inputs.windows_x64 && 'windows-latest' }}
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup signing for MacOS
        if: ${{ inputs.signing_enabled && (matrix.os == 'macos-latest' || matrix.os == 'macos-13') }}
        env:
          APPLE_BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          APPLE_BUILD_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_BUILD_CERTIFICATE_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          LOCAL_PROPERTIES_BASE64: ${{ secrets.LOCAL_PROPERTIES_BASE64 }}
        run: |
          # create variables
          WORK_DIR="$(pwd)"
          LOCAL_PROPERTIES_PATH="${WORK_DIR}/local.properties"
          CERTIFICATE_PATH="${WORK_DIR}/share/apple/certificate.p12"
          KEYCHAIN_PATH="${WORK_DIR}/share/apple/keychain.keychain-db"
          
          # write base64 secrets into files
          echo -n "${LOCAL_PROPERTIES_BASE64}" | base64 --decode -o "${LOCAL_PROPERTIES_PATH}"
          echo -n "${APPLE_BUILD_CERTIFICATE_BASE64}" | base64 --decode -o "${CERTIFICATE_PATH}"
          
          # create temporary keychain
          security create-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          security unlock-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          
          # import certificate to keychain
          security import "${CERTIFICATE_PATH}" -P "${APPLE_BUILD_CERTIFICATE_PASSWORD}" -A -t cert -f pkcs12 -k "${KEYCHAIN_PATH}"
          security set-key-partition-list -S apple-tool:,apple: -k "${APPLE_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security list-keychain -d user -s "${KEYCHAIN_PATH}"

      - name: Setup environment for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: choco install wget

      - name: Init JetBrains JDK
        shell: bash
        run: ./init-jdk.sh

      - name: Build with Gradle
        shell: bash
        run: |
          source env.sh
          ./gradlew clean bundle

      - name: Upload MacOSX-arm64 (dmg)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          name: MacOSX-dmg-arm64
          path: build/*.dmg

      - name: Upload MacOSX-x64 (dmg)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'macos-13' }}
        with:
          name: MacOSX-dmg-x64
          path: build/*.dmg

      - name: Upload Linux-x64 (deb)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: Linux-deb-x64
          path: build/*.deb

      - name: Upload Linux-x64 (rpm)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: Linux-rpm-x64
          path: build/*.rpm

      - name: Upload Linux-x64 (tar.gz)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: Linux-archive-x64
          path: build/*.tar.gz

      - name: Upload Windows-x64 (exe)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          name: Windows-exe-x64
          path: build/*.exe
